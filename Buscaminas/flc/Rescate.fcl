/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please 
	read Matlab's tutorial on fuzzy logic toolbox 
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf

									Pablo Cingolani 
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	time : REAL;
	help : REAL;
	mistakes : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	difficult : REAL;
END_VAR

FUZZIFY time		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (2, 0) ; 
	TERM average := (1, 0) (4,1) (6,1) (9,0);
	TERM high := (6, 0) (9, 1);
END_FUZZIFY

FUZZIFY help			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM low := (0, 1) (1, 1) (3,0) ;
	TERM high := (2,0) (5,1);
END_FUZZIFY

FUZZIFY mistakes			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM low := (0, 1) (1, 1) (3,0) ;
	TERM high := (2,0) (4,1);
END_FUZZIFY

DEFUZZIFY difficult			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM easy := (0,0) (5,1) (10,0);
	TERM normal := (10,0) (15,1) (20,0);
	TERM hard := (20,0) (25,1) (30,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method
	

	RULE 1 : IF time IS low AND help IS low AND Mistakes is low THEN difficult IS hard;
	RULE 2 : IF time IS low AND help IS high AND Mistakes is low THEN difficult IS normal;
	RULE 3 : IF time IS low AND help IS low AND Mistakes is high THEN difficult IS easy;
	RULE 4 : IF time IS high OR help IS high OR Mistakes is high THEN difficult IS easy;
	RULE 5 : IF time IS average AND help IS low AND Mistakes is high THEN difficult IS easy;
	RULE 6 : IF time IS average AND help IS high AND Mistakes is low THEN difficult IS normal;


	
	
	
END_RULEBLOCK

END_FUNCTION_BLOCK

	//RULE 3 : IF time IS low AND help IS low AND Mistakes is high THEN difficult IS easy;	
	//RULE 4 : IF time IS average AND help IS low AND Mistakes is low THEN difficult IS normal;
	//RULE 5 : IF time IS average AND help IS high AND Mistakes is low THEN difficult IS normal;
	//RULE 6 : IF time IS average AND help IS low AND Mistakes is high THEN difficult IS easy;	
	//RULE 7 : IF time IS high OR help IS high OR Mistakes is high THEN difficult IS easy;